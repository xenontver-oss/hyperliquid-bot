import json
import time
import requests
from hyperliquid.info import Info
from hyperliquid.utils.error import ClientError
from dotenv import load_dotenv
import os
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import sqlite3
import logging
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ debug.log
logging.basicConfig(
    filename='debug.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
debug_logger = logging.getLogger('debug')

# –ó–∞–≥—Ä—É–∑–∏ .env —Ñ–∞–π–ª
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
API_URL = os.getenv("API_URL")
WALLETS = os.getenv("WALLETS")
TG_TOKEN = os.getenv("TG_TOKEN")
TG_CHAT_ID = os.getenv("TG_CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
missing_vars = []
if not API_URL:
    missing_vars.append("API_URL")
if not WALLETS:
    missing_vars.append("WALLETS")
if not TG_TOKEN:
    missing_vars.append("TG_TOKEN")
if not TG_CHAT_ID:
    missing_vars.append("TG_CHAT_ID")
if missing_vars:
    raise ValueError(f"–°–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã: {', '.join(missing_vars)}")

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ WALLETS
if WALLETS:
    WALLETS = WALLETS.split(",")
    WALLETS = [w.strip() for w in WALLETS]
else:
    WALLETS = []
print(f"WALLETS: {WALLETS}")
debug_logger.info(f"WALLETS: {WALLETS}")

# –ó–∞–≥—Ä—É–∑–∏ –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è API
try:
    with open('config.json', 'r') as f:
        config = json.load(f)
except FileNotFoundError:
    print("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    debug_logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    with open("app_errors.log", "a") as f:
        f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω\n")
    raise

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ—à–µ–ª—å–∫–æ–≤
try:
    with open('wallet_names.json', 'r') as f:
        wallet_names_data = json.load(f)
        WALLET_NAMES = wallet_names_data.get('wallet_names', {})
except FileNotFoundError:
    print("–§–∞–π–ª wallet_names.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö")
    debug_logger.warning("–§–∞–π–ª wallet_names.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    WALLET_NAMES = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
try:
    info = Info(API_URL, skip_ws=False)
except ClientError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Info: {e}")
    debug_logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Info: {e}")
    with open("app_errors.log", "a") as f:
        f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Info: {e}\n")
    info = Info(API_URL, skip_ws=False)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –ë–î
conn = sqlite3.connect('history.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–º–∏—Å—Å–∏–π
for wallet in WALLETS:
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS trades_{wallet} (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp INTEGER,
            oid TEXT,
            coin TEXT,
            price REAL,
            size REAL,
            side TEXT,
            direction TEXT,
            closedPnl REAL,
            fee REAL,
            exchange_fee REAL DEFAULT 0.0,
            bot_fee REAL DEFAULT 0.0,
            startPosition REAL,
            total_open_size_long REAL,
            total_close_size_long REAL,
            remaining_open_size_long REAL,
            total_open_size_short REAL,
            total_close_size_short REAL,
            remaining_open_size_short REAL,
            accumulated_fees_long REAL DEFAULT 0.0,
            accumulated_fees_short REAL DEFAULT 0.0,
            realized_fees REAL DEFAULT 0.0,
            net_pnl REAL DEFAULT 0.0,
            UNIQUE(oid, coin, timestamp, size, startPosition)
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    for column in ['exchange_fee', 'bot_fee', 'accumulated_fees_long', 'accumulated_fees_short', 'realized_fees', 'net_pnl']:
        try:
            cursor.execute(f'ALTER TABLE trades_{wallet} ADD COLUMN {column} REAL DEFAULT 0.0')
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
    cursor.execute(f'''
        CREATE TABLE IF NOT EXISTS sent_trades_{wallet} (
            oid TEXT PRIMARY KEY
        )
    ''')
conn.commit()

# –ù–ï –æ—á–∏—â–∞–µ–º sent_trades –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# for wallet in WALLETS:
#     cursor.execute(f"DELETE FROM sent_trades_{wallet}")
# conn.commit()
debug_logger.info("Skipped clearing sent_trades to avoid duplicate notifications")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î
trades_history = {}
sent_trades_history = {}
for wallet in WALLETS:
    trades_history[wallet] = pd.read_sql(f"SELECT * FROM trades_{wallet} ORDER BY id", conn)
    sent_trades_history[wallet] = pd.read_sql(f"SELECT * FROM sent_trades_{wallet} ORDER BY oid", conn)
    debug_logger.info(f"Loaded trades_history for {wallet}: {len(trades_history[wallet])} trades")
    debug_logger.info(f"Loaded sent_trades_history for {wallet}: {len(sent_trades_history[wallet])} trades")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def send_tg_message(message):
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    max_length = 4096
    if len(message) > max_length:
        parts = []
        current_part = ""
        for line in message.split("\n"):
            if len(current_part) + len(line) + 1 > max_length:
                parts.append(current_part)
                current_part = line + "\n"
            else:
                current_part += line + "\n"
        if current_part:
            parts.append(current_part)
    else:
        parts = [message]
    for part in parts:
        params = {"chat_id": TG_CHAT_ID, "text": part}
        try:
            response = requests.post(url, params=params, timeout=10)
            response.raise_for_status()
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {part[:50]}...")
            debug_logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {part[:50]}...")
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            debug_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            with open("telegram_errors.log", "a") as f:
                f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}\n")
        time.sleep(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ float
def safe_float(value, default=0.0):
    if isinstance(value, (int, float)):
        return float(value)
    elif isinstance(value, str):
        try:
            return float(value)
        except ValueError:
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ float: {value}")
            return default
    elif isinstance(value, dict):
        debug_logger.warning(f"–ù–∞–π–¥–µ–Ω —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞: {value}")
        for key in ('value', 'amount', 'closedPnl', 'px', 'sz'):
            if key in value:
                try:
                    return float(value[key])
                except (ValueError, TypeError):
                    debug_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {key} –∏–∑ —Å–ª–æ–≤–∞—Ä—è: {value[key]}")
        return default
    debug_logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(value)} -> {value}")
    return default

def collect_all_pnl_data():
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ PnL –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    all_trades = []
    
    for wallet in WALLETS:
        try:
            cursor.execute(f"""
                SELECT timestamp, closedPnl, net_pnl, coin, oid
                FROM trades_{wallet}
                ORDER BY timestamp ASC
            """)
            
            wallet_trades = cursor.fetchall()
            
            for trade in wallet_trades:
                all_trades.append({
                    'timestamp': trade[0],
                    'closedPnl': safe_float(trade[1]),
                    'net_pnl': safe_float(trade[2]),
                    'coin': trade[3],
                    'oid': trade[4],
                    'wallet': wallet
                })
                
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    all_trades.sort(key=lambda x: x['timestamp'])
    
    return all_trades

def create_cumulative_pnl_charts():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã—Ö Closed PnL –∏ Net PnL"""
    try:
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ PnL...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_trades = collect_all_pnl_data()
        
        if not all_trades:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ —Å—É–º–º—ã
        cumulative_closed_pnl = 0
        cumulative_net_pnl = 0
        timestamps = []
        closed_pnl_values = []
        net_pnl_values = []
        
        for trade in all_trades:
            cumulative_closed_pnl += safe_float(trade['closedPnl']) or 0.0
            cumulative_net_pnl += safe_float(trade['net_pnl']) or 0.0
            
            timestamps.append(datetime.fromtimestamp(trade['timestamp'] / 1000))
            closed_pnl_values.append(cumulative_closed_pnl)
            net_pnl_values.append(cumulative_net_pnl)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è Closed PnL
        fig_closed = go.Figure()
        fig_closed.add_trace(go.Scatter(
            x=timestamps,
            y=closed_pnl_values,
            mode='lines',
            name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL',
            line=dict(color='blue', width=2),
            hovertemplate='<b>–í—Ä–µ–º—è:</b> %{x}<br>' +
                         '<b>–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL:</b> %{y:.4f}<br>' +
                         '<extra></extra>'
        ))
        
        fig_closed.update_layout(
            title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º',
            xaxis_title='–í—Ä–µ–º—è',
            yaxis_title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL',
            template='plotly_white',
            hovermode='x unified'
        )
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è Net PnL
        fig_net = go.Figure()
        fig_net.add_trace(go.Scatter(
            x=timestamps,
            y=net_pnl_values,
            mode='lines',
            name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL',
            line=dict(color='red' if net_pnl_values[-1] < 0 else 'green', width=2),
            hovertemplate='<b>–í—Ä–µ–º—è:</b> %{x}<br>' +
                         '<b>–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL:</b> %{y:.4f}<br>' +
                         '<extra></extra>'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ –Ω—É–ª–µ
        fig_net.add_hline(y=0, line_dash="dash", line_color="gray", 
                         annotation_text="–ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è")
        
        fig_net.update_layout(
            title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º',
            xaxis_title='–í—Ä–µ–º—è',
            yaxis_title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL',
            template='plotly_white',
            hovermode='x unified'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ HTML —Ñ–∞–π–ª—ã
        fig_closed.write_html("cumulative_closed_pnl.html")
        fig_net.write_html("cumulative_net_pnl.html")
        
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫ Closed PnL —Å–æ—Ö—Ä–∞–Ω–µ–Ω: cumulative_closed_pnl.html")
        print(f"üí∞ –ì—Ä–∞—Ñ–∏–∫ Net PnL —Å–æ—Ö—Ä–∞–Ω–µ–Ω: cumulative_net_pnl.html")
        final_closed_pnl = safe_float(closed_pnl_values[-1]) or 0.0 if closed_pnl_values else 0.0
        final_net_pnl = safe_float(net_pnl_values[-1]) or 0.0 if net_pnl_values else 0.0
        print(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π Closed PnL: {final_closed_pnl:.4f}")
        print(f"üíπ –ò—Ç–æ–≥–æ–≤—ã–π Net PnL: {final_net_pnl:.4f}")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}"
        print(error_msg)
        debug_logger.error(error_msg)

def get_last_trade_timestamp(wallet):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        cursor.execute(f"""
            SELECT MAX(timestamp) FROM trades_{wallet}
        """)
        result = cursor.fetchone()
        return result[0] if result[0] else 0
    except sqlite3.Error as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –¥–ª—è {wallet}: {e}")
        return 0

def trade_exists_in_db(wallet, oid, coin, timestamp, size, start_position):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑–µ –ø–æ 5 –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏"""
    try:
        cursor.execute(f"""
            SELECT COUNT(*) FROM trades_{wallet} 
            WHERE oid = ? AND coin = ? AND timestamp = ? AND size = ? AND startPosition = ?
        """, (oid, coin, timestamp, size, start_position))
        result = cursor.fetchone()
        return result[0] > 0
    except sqlite3.Error as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ {oid}/{coin} –¥–ª—è {wallet}: {e}")
        return False

def send_telegram_message(message, silent=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not TG_TOKEN or not TG_CHAT_ID:
        debug_logger.warning("Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
        payload = {
            'chat_id': TG_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML',
            'disable_notification': silent
        }
        
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            debug_logger.info("‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.status_code} - {response.text}"
            debug_logger.error(error_msg)
            with open("telegram_errors.log", "a") as f:
                f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {error_msg}\n")
            return False
            
    except Exception as e:
        error_msg = f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram: {e}"
        debug_logger.error(error_msg)
        with open("telegram_errors.log", "a") as f:
            f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {error_msg}\n")
        return False

def is_closing_direction(direction):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏"""
    closing_directions = [
        'Close Long', 'Close Short', 'Decrease Long', 'Decrease Short',
        'Close Long + Open Short', 'Close Short + Open Long'
    ]
    return direction in closing_directions

def get_wallet_name(wallet_address):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å"""
    if wallet_address in WALLET_NAMES:
        return WALLET_NAMES[wallet_address]
    else:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å (–ø–µ—Ä–≤—ã–µ 6 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞)
        return f"{wallet_address[:6]}...{wallet_address[-4:]}"

def format_trade_notification(wallet, coin, direction, size, price, closed_pnl, net_pnl, timestamp, oid):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ –¥–ª—è Telegram"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction_emoji = {
        'Close Long': 'üìàüî¥',
        'Close Short': 'üìâüî¥', 
        'Decrease Long': 'üìàüîπ',
        'Decrease Short': 'üìâüîπ'
    }.get(direction, 'üíπ')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    trade_time = datetime.fromtimestamp(timestamp / 1000).strftime('%H:%M:%S')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è PnL
    pnl_symbol = "üü¢" if net_pnl >= 0 else "üî¥"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    wallet_name = get_wallet_name(wallet)
    
    message = f"""üö® <b>{wallet_name} –∑–∞–∫—Ä—ã–ª –ø–æ–∑–∏—Ü–∏—é!</b>
    
üîç <b>OID:</b> <code>{oid}</code>
{direction_emoji} <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}
üíé <b>–ú–æ–Ω–µ—Ç–∞:</b> {coin}
üí∞ <b>–†–∞–∑–º–µ—Ä:</b> {size}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:.4f}
üìä <b>Closed PnL:</b> {closed_pnl:+.4f}
{pnl_symbol} <b>Net PnL:</b> {net_pnl:+.4f}
üïê <b>–í—Ä–µ–º—è:</b> {trade_time}
üëõ <code>{wallet}</code>"""

    return message

def format_negative_pnl_alert(wallet, coin, direction, size, price, closed_pnl, net_pnl, timestamp, oid):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º Net PnL —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∏"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    direction_emoji = {
        'Close Long': 'üìàüî¥',
        'Close Short': 'üìâüî¥', 
        'Decrease Long': 'üìàüîπ',
        'Decrease Short': 'üìâüîπ'
    }.get(direction, 'üíπ')
    
    trade_time = datetime.fromtimestamp(timestamp / 1000).strftime('%H:%M:%S')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    wallet_name = get_wallet_name(wallet)
    
    message = f"""‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {wallet_name} - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Net PnL</b>
    
üîç <b>OID:</b> <code>{oid}</code>
{direction_emoji} <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction}
üíé <b>–ú–æ–Ω–µ—Ç–∞:</b> {coin}
üí∞ <b>–†–∞–∑–º–µ—Ä:</b> {size}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:.4f}
üìä <b>Closed PnL:</b> {closed_pnl:+.4f}
üî¥ <b>Net PnL:</b> {net_pnl:.4f}
üïê <b>–í—Ä–µ–º—è:</b> {trade_time}
üëõ <code>{wallet}</code>
    
‚ùóÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"""

    return message

def send_trade_notifications(wallet, coin, direction, size, price, closed_pnl, net_pnl, timestamp, oid):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –≤ Telegram"""
    try:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∑–∞–∫—Ä—ã—Ç–∏—è –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        if is_closing_direction(direction):
            message = format_trade_notification(wallet, coin, direction, size, price, closed_pnl, net_pnl, timestamp, oid)
            send_telegram_message(message)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º Net PnL —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è/—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
        if net_pnl is not None and net_pnl < 0 and is_closing_direction(direction):
            alert_message = format_negative_pnl_alert(wallet, coin, direction, size, price, closed_pnl, net_pnl, timestamp, oid)
            send_telegram_message(alert_message)
            
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–¥–µ–ª–∫–∏ {coin}: {e}")

def get_open_positions_summary():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API"""
    open_positions = []
    
    for wallet in WALLETS:
        try:
            debug_logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ API –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ API  
            user_state = info.user_state(wallet)
            
            if not user_state:
                debug_logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö user_state –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
                continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ API
            asset_positions = user_state.get("assetPositions", [])
            
            if not asset_positions:
                debug_logger.info(f"–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            wallet_positions = []
            total_unrealized_pnl = 0.0
            
            for asset_position in asset_positions:
                position = asset_position.get("position", {})
                coin = position.get("coin", "")
                size = safe_float(position.get("szi", 0.0))  # szi = signed size (+ –¥–ª—è long, - –¥–ª—è short)
                unrealized_pnl = safe_float(position.get("unrealizedPnl", 0.0))
                entry_price = safe_float(position.get("entryPx", 0.0))
                margin_used = safe_float(position.get("marginUsed", 0.0))
                
                # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Ä–∞–≤–µ–Ω 0, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
                if abs(size) > 0:
                    long_size = max(0, size)  # –ï—Å–ª–∏ size > 0, —ç—Ç–æ long –ø–æ–∑–∏—Ü–∏—è
                    short_size = abs(min(0, size))  # –ï—Å–ª–∏ size < 0, —ç—Ç–æ short –ø–æ–∑–∏—Ü–∏—è
                    
                    wallet_positions.append({
                        'coin': coin,
                        'long': long_size,
                        'short': short_size,
                        'unrealized_pnl': unrealized_pnl,
                        'entry_price': entry_price,
                        'margin_used': margin_used
                    })
                    
                    total_unrealized_pnl += unrealized_pnl
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if wallet_positions:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π Net PnL –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                cursor.execute(f"""
                    SELECT SUM(net_pnl)
                    FROM trades_{wallet}
                """)
                result = cursor.fetchone()
                realized_net_pnl = safe_float(result[0]) if result and result[0] is not None else 0.0
                
                # –û–±—â–∏–π PnL = realized (–∏–∑ –±–∞–∑—ã) + unrealized (–∏–∑ API)
                total_pnl = realized_net_pnl + total_unrealized_pnl
                
                open_positions.append({
                    'wallet': wallet,
                    'positions': wallet_positions,
                    'realized_pnl': realized_net_pnl,
                    'unrealized_pnl': total_unrealized_pnl,
                    'total_pnl': total_pnl
                })
                
                debug_logger.info(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {wallet}: {len(wallet_positions)} –ø–æ–∑–∏—Ü–∏–π, unrealized PnL: {total_unrealized_pnl:.4f}")
                
        except Exception as e:
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π –∏–∑ API –¥–ª—è {wallet}: {e}")
            continue
    
    return open_positions

def format_hourly_positions_report(open_positions):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º"""
    current_time = datetime.now().strftime('%H:%M:%S')
    
    if not open_positions:
        return f"""üìä <b>–ß–ê–°–û–í–û–ô –û–¢–ß–ï–¢ –ü–û –ü–û–ó–ò–¶–ò–Ø–ú</b>
        
‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã!
üïê <b>–í—Ä–µ–º—è:</b> {current_time}"""
    
    report_lines = [f"üìä <b>–ß–ê–°–û–í–û–ô –û–¢–ß–ï–¢ –ü–û –û–¢–ö–†–´–¢–´–ú –ü–û–ó–ò–¶–ò–Ø–ú</b>"]
    report_lines.append(f"üïê <b>–í—Ä–µ–º—è:</b> {current_time}")
    report_lines.append("")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É PnL (—É–±—ã—Ç–æ—á–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è)
    sorted_positions = sorted(open_positions, key=lambda x: x['total_pnl'])
    
    for pos in sorted_positions:
        wallet = pos['wallet']
        wallet_name = get_wallet_name(wallet)
        realized_pnl = pos['realized_pnl']
        unrealized_pnl = pos['unrealized_pnl']
        total_pnl = pos['total_pnl']
        positions = pos['positions']
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        pnl_emoji = "üü¢" if total_pnl >= 0 else "üî¥"
        
        report_lines.append(f"üìç <b>{wallet_name}</b>")
        report_lines.append(f"   üí∞ –û–±—â–∏–π PnL: ${total_pnl:.2f} {pnl_emoji}")
        report_lines.append(f"   üìà Realized: ${realized_pnl:.2f} | üîÑ Unrealized: ${unrealized_pnl:.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–æ–Ω–µ—Ç–∞–º —Å –¥–µ—Ç–∞–ª—è–º–∏
        for coin_pos in positions:
            coin = coin_pos['coin']
            long_pos = coin_pos['long']
            short_pos = coin_pos['short']
            unrealized = coin_pos['unrealized_pnl']
            entry_px = coin_pos['entry_price']
            
            pos_info = []
            if long_pos > 0:
                pos_info.append(f"üìà Long: {long_pos:.4f}")
            if short_pos > 0:
                pos_info.append(f"üìâ Short: {short_pos:.4f}")
            
            if pos_info:
                position_line = f"   ü™ô <b>{coin}:</b> {' | '.join(pos_info)}"
                if entry_px > 0:
                    position_line += f" @ ${entry_px:.4f}"
                if abs(unrealized) > 0.01:
                    unrealized_emoji = "üü¢" if unrealized >= 0 else "üî¥"
                    position_line += f" (${unrealized:+.2f} {unrealized_emoji})"
                report_lines.append(position_line)
        
        report_lines.append(f"   üëõ <code>{wallet}</code>")
        report_lines.append("")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_wallets = len(open_positions)
    positive_pnl = sum(1 for pos in open_positions if pos['total_pnl'] > 0)
    negative_pnl = total_wallets - positive_pnl
    total_unrealized = sum(pos['unrealized_pnl'] for pos in open_positions)
    
    report_lines.append("üìà <b>–°–í–û–î–ö–ê:</b>")
    report_lines.append(f"   üî¢ –ö–æ—à–µ–ª—å–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏: {total_wallets}")
    report_lines.append(f"   üü¢ –í –ø–ª—é—Å–µ: {positive_pnl}")
    report_lines.append(f"   üî¥ –í –º–∏–Ω—É—Å–µ: {negative_pnl}")
    report_lines.append(f"   üîÑ –û–±—â–∏–π Unrealized PnL: ${total_unrealized:.2f}")
    
    return '\n'.join(report_lines)

def send_startup_daily_summary():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç NET PnL –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        print("\nüìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ NET PnL –∑–∞ 24 —á–∞—Å–∞...")
        debug_logger.info("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ NET PnL –∑–∞ 24 —á–∞—Å–∞...")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
        twenty_four_hours_ago = int((time.time() - (24 * 60 * 60)) * 1000)
        
        wallet_results = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—à–µ–ª—å–∫—É
        for wallet in WALLETS:
            try:
                cursor.execute(f"""
                    SELECT 
                        SUM(net_pnl) as daily_net_pnl,
                        COUNT(*) as trades_count
                    FROM trades_{wallet} 
                    WHERE timestamp >= ?
                """, (twenty_four_hours_ago,))
                
                result = cursor.fetchone()
                if result and result[0] is not None:
                    daily_net_pnl = safe_float(result[0], 0.0)
                    trades_count = int(result[1]) if result[1] else 0
                    
                    wallet_results.append({
                        'wallet': wallet,
                        'wallet_name': get_wallet_name(wallet),
                        'daily_net_pnl': daily_net_pnl,
                        'trades_count': trades_count
                    })
                else:
                    # –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ 24 —á–∞—Å–∞
                    wallet_results.append({
                        'wallet': wallet,
                        'wallet_name': get_wallet_name(wallet),
                        'daily_net_pnl': 0.0,
                        'trades_count': 0
                    })
                    
            except Exception as e:
                debug_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")
                wallet_results.append({
                    'wallet': wallet,
                    'wallet_name': get_wallet_name(wallet),
                    'daily_net_pnl': 0.0,
                    'trades_count': 0
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç –ª—É—á—à–∏—Ö –∫ —Ö—É–¥—à–∏–º
        wallet_results.sort(key=lambda x: x['daily_net_pnl'], reverse=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_message = format_daily_summary_report(wallet_results)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if send_telegram_message(report_message):
            print(f"‚úÖ –°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç NET PnL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallet_results)})")
            debug_logger.info(f"‚úÖ –°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç NET PnL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallet_results)})")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"
        print(error_msg)
        debug_logger.error(error_msg)

def format_daily_summary_report(wallet_results):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç NET PnL"""
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ
    profitable_wallets = [w for w in wallet_results if w['daily_net_pnl'] > 0]
    losing_wallets = [w for w in wallet_results if w['daily_net_pnl'] < 0]
    zero_wallets = [w for w in wallet_results if w['daily_net_pnl'] == 0]
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_net_pnl = sum(w['daily_net_pnl'] for w in wallet_results)
    total_trades = sum(w['trades_count'] for w in wallet_results)
    
    report_lines = [f"üìÖ <b>–°–£–¢–û–ß–ù–ê–Ø –°–í–û–î–ö–ê NET PnL (24—á)</b>"]
    report_lines.append(f"üïê {current_time}")
    report_lines.append("")
    
    # –¢–û–ü-3 –ª—É—á—à–∏—Ö –∫–æ—à–µ–ª—å–∫–∞
    if profitable_wallets:
        report_lines.append("üèÜ <b>–¢–û–ü –ö–û–®–ï–õ–¨–ö–ò:</b>")
        top_count = min(3, len(profitable_wallets))
        medals = ["ü•á", "ü•à", "ü•â"]
        
        for i in range(top_count):
            wallet = profitable_wallets[i]
            medal = medals[i] if i < len(medals) else "üîπ"
            trades_info = f" ({wallet['trades_count']} —Å–¥–µ–ª–æ–∫)" if wallet['trades_count'] > 0 else ""
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∂–∏—Ä–Ω–æ–µ, –∞–¥—Ä–µ—Å –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
            wallet_name_bold = f"<b>{wallet['wallet_name']}</b>"
            wallet_addr_copy = f"<code>{wallet['wallet']}</code>"
            report_lines.append(f"{medal} {wallet_name_bold}")
            report_lines.append(f"üíº {wallet_addr_copy}")
            report_lines.append(f"üí∞ +${wallet['daily_net_pnl']:.2f}{trades_info}")
            report_lines.append("")  # –ü—Ä–æ–±–µ–ª –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
        
        report_lines.append("")
    
    # –¢–û–ü-3 —Ö—É–¥—à–∏—Ö –∫–æ—à–µ–ª—å–∫–∞  
    if losing_wallets:
        report_lines.append("‚ö†Ô∏è <b>–ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–û–®–ï–õ–¨–ö–ò:</b>")
        worst_count = min(3, len(losing_wallets))
        # –•—É–¥—à–∏–µ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
        worst_wallets = wallet_results[-worst_count:] if len(wallet_results) >= worst_count else losing_wallets
        
        for wallet in reversed(worst_wallets):
            if wallet['daily_net_pnl'] < 0:
                trades_info = f" ({wallet['trades_count']} —Å–¥–µ–ª–æ–∫)" if wallet['trades_count'] > 0 else ""
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –∂–∏—Ä–Ω–æ–µ, –∞–¥—Ä–µ—Å –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
                wallet_name_bold = f"<b>{wallet['wallet_name']}</b>"
                wallet_addr_copy = f"<code>{wallet['wallet']}</code>"
                report_lines.append(f"üî¥ {wallet_name_bold}")
                report_lines.append(f"üíº {wallet_addr_copy}")
                report_lines.append(f"üí∞ ${wallet['daily_net_pnl']:.2f}{trades_info}")
                report_lines.append("")  # –ü—Ä–æ–±–µ–ª –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
        
        report_lines.append("")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    profit_count = len(profitable_wallets)
    loss_count = len(losing_wallets)
    zero_count = len(zero_wallets)
    total_wallets = len(wallet_results)
    
    report_lines.append("üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>")
    report_lines.append(f"üü¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profit_count} / üî¥ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {loss_count} / ‚ö™ –ë–µ–∑ —Å–¥–µ–ª–æ–∫: {zero_count}")
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    total_emoji = "üü¢" if total_net_pnl > 0 else "üî¥" if total_net_pnl < 0 else "‚ö™"
    report_lines.append(f"üíπ <b>–°—É–º–º–∞—Ä–Ω—ã–π NET PnL:</b> ${total_net_pnl:+.2f} {total_emoji}")
    report_lines.append(f"üìà <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {total_trades}")
    
    return "\n".join(report_lines)

def send_hourly_positions_report():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º"""
    try:
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º...")
        debug_logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º...")
        
        open_positions = get_open_positions_summary()
        report_message = format_hourly_positions_report(open_positions)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if send_telegram_message(report_message):
            print(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∫–æ—à–µ–ª—å–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏: {len(open_positions)})")
            debug_logger.info(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∫–æ—à–µ–ª—å–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏: {len(open_positions)})")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"
        print(error_msg)
        debug_logger.error(error_msg)

def send_monitoring_start_notification():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        total_closed_pnl = 0
        total_net_pnl = 0
        positive_wallets = 0
        negative_wallets = 0
        
        for wallet in WALLETS:
            try:
                cursor.execute(f"""
                    SELECT SUM(closedPnl) as total_closed_pnl, SUM(net_pnl) as total_net_pnl 
                    FROM trades_{wallet}
                """)
                
                result = cursor.fetchone()
                if result and result[0] is not None:
                    wallet_closed_pnl = safe_float(result[0])
                    wallet_net_pnl = safe_float(result[1])
                    
                    total_closed_pnl += wallet_closed_pnl
                    total_net_pnl += wallet_net_pnl
                    
                    if wallet_net_pnl >= 0:
                        positive_wallets += 1
                    else:
                        negative_wallets += 1
                        
            except sqlite3.Error:
                continue
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        pnl_symbol = "üü¢" if total_net_pnl >= 0 else "üî¥"
        
        message = f"""üöÄ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Hyperliquid –∑–∞–ø—É—â–µ–Ω</b>

üìä <b>–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:</b>
üìà Closed PnL: {total_closed_pnl:+.4f}
{pnl_symbol} Net PnL: {total_net_pnl:+.4f}

üíº <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤:</b>
üü¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {positive_wallets}
üî¥ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {negative_wallets}

‚è∞ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</b>
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º PnL –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã"""

        send_telegram_message(message, silent=True)
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

def send_incremental_summary(total_new_trades, wallets_with_new_trades):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ–± –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
    if total_new_trades == 0:
        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
        
    try:
        current_time = datetime.now().strftime('%H:%M:%S')
        
        message = f"""üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b> - {current_time}

üÜï <b>–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {total_new_trades}
üíº <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤:</b> {len(wallets_with_new_trades)}

üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""

        send_telegram_message(message, silent=True)
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def debug_wallet_data(wallet):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        debug_logger.info(f"üîß –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        cursor.execute(f"""
            SELECT COUNT(*) as total_trades, 
                   MIN(timestamp) as min_ts, 
                   MAX(timestamp) as max_ts 
            FROM trades_{wallet}
        """)
        
        result = cursor.fetchone()
        if result:
            total_trades, min_ts, max_ts = result
            debug_logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {total_trades} —Å–¥–µ–ª–æ–∫, –¥–∏–∞–ø–∞–∑–æ–Ω: {min_ts} - {max_ts}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏
            cursor.execute(f"""
                SELECT timestamp, coin, oid, size, direction 
                FROM trades_{wallet} 
                ORDER BY timestamp DESC 
                LIMIT 3
            """)
            
            recent_trades = cursor.fetchall()
            debug_logger.info(f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –±–∞–∑–µ:")
            for trade in recent_trades:
                debug_logger.info(f"  - {trade[0]} | {trade[1]} | {trade[2][:8]} | {trade[3]} | {trade[4]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        user_fills = info.user_fills(wallet)
        if user_fills:
            debug_logger.info(f"üåê API –¥–∞–Ω–Ω—ã–µ: {len(user_fills)} —Å–¥–µ–ª–æ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏ –∏–∑ API
            sorted_fills = sorted(user_fills, key=lambda x: x.get('time', 0), reverse=True)
            debug_logger.info(f"üïê –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏–∑ API:")
            for i, fill in enumerate(sorted_fills[:3]):
                timestamp = int(fill.get('time', 0))
                coin = fill.get('coin', '')
                oid = str(fill.get('oid', ''))[:8]
                size = safe_float(fill.get('sz', 0.0))
                debug_logger.info(f"  - {timestamp} | {coin} | {oid} | {size}")
                
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")

def process_incremental_trades_for_wallet(wallet):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ –∏–∑ –±–∞–∑—ã
        last_timestamp = get_last_trade_timestamp(wallet)
        debug_logger.info(f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –¥–ª—è {wallet}: {last_timestamp}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∏–∑ API
        user_fills = info.user_fills(wallet)
        
        if not user_fills:
            debug_logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
            return 0
        
        debug_logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(user_fills)} —Å–¥–µ–ª–æ–∫ –∏–∑ API –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
        new_trades = []
        api_timestamps = []
        
        for fill in user_fills:
            trade_timestamp = int(fill.get('time', 0))
            trade_oid = str(fill.get('oid', ''))
            coin = fill.get('coin', '')
            size = safe_float(fill.get('sz', 0.0))
            start_position = safe_float(fill.get('startPosition', 0.0))
            
            api_timestamps.append(trade_timestamp)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –Ω–æ–≤–µ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ò –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ (5-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º >= –ø–æ—Ç–æ–º—É —á—Ç–æ API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–¥–µ–ª–∫–∏ —Å —Ç–æ–π –∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π, –Ω–æ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ–≤—ã–º–∏
            if trade_timestamp >= last_timestamp:
                exists_in_db = trade_exists_in_db(wallet, trade_oid, coin, trade_timestamp, size, start_position)
                debug_logger.info(f"üîç –°–¥–µ–ª–∫–∞ {trade_oid}/{coin} timestamp={trade_timestamp}: –Ω–æ–≤–µ–µ_–∏–ª–∏_—Ä–∞–≤–Ω–æ={trade_timestamp >= last_timestamp}, –≤_–±–∞–∑–µ={exists_in_db}")
                
                if not exists_in_db:
                    new_trades.append(fill)
                    debug_logger.info(f"‚úÖ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {trade_oid}/{coin}")
                else:
                    debug_logger.info(f"‚è≠Ô∏è –°–¥–µ–ª–∫–∞ {trade_oid}/{coin} —É–∂–µ –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        if api_timestamps:
            min_api_ts = min(api_timestamps)
            max_api_ts = max(api_timestamps)
            debug_logger.info(f"‚è∞ –î–∏–∞–ø–∞–∑–æ–Ω API: {min_api_ts} - {max_api_ts}, –ë–∞–∑–∞: {last_timestamp}")
        
        if not new_trades:
            debug_logger.info(f"‚úÖ –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return 0
        
        debug_logger.info(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_trades)} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        new_trades_sorted = sorted(new_trades, key=lambda x: x.get('time', 0))
        processed_count = 0
        
        for fill in new_trades_sorted:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                oid = str(fill.get('oid', ''))
                coin = fill.get('coin', '')
                timestamp = int(fill.get('time', 0))
                price = safe_float(fill.get('px', 0.0))
                size = safe_float(fill.get('sz', 0.0))
                side = fill.get('side', '')
                closed_pnl = safe_float(fill.get('closedPnl', 0.0))
                fee = safe_float(fill.get('fee', 0.0))
                start_position = safe_float(fill.get('startPosition', 0.0))
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –±–æ—Ç–∞
                bot_fee_bps = config.get('bot_fee_bps', 5)
                bot_fee = calculate_bot_fee(size, price, bot_fee_bps)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                direction = get_direction(fill, wallet)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                current_totals = get_current_totals(wallet, coin, cursor)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏) 
                new_totals = calculate_new_totals(current_totals, direction, size, fee, bot_fee)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π PnL —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π
                close_fee_only = new_totals.get('close_fee_only', None)
                net_pnl = calculate_net_pnl(closed_pnl, fee, bot_fee, new_totals['realized_fees'], close_fee_only)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                cursor.execute(f'''
                    INSERT INTO trades_{wallet} (
                        oid, coin, timestamp, price, size, side, direction, 
                        closedPnl, fee, startPosition,
                        total_open_size_long, total_close_size_long, remaining_open_size_long,
                        total_open_size_short, total_close_size_short, remaining_open_size_short,
                        accumulated_fees_long, accumulated_fees_short, realized_fees, net_pnl,
                        exchange_fee, bot_fee
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (oid, coin, timestamp, price, size, side, direction,
                     closed_pnl, fee, start_position,
                     new_totals['total_open_size_long'], new_totals['total_close_size_long'], new_totals['remaining_open_size_long'],
                     new_totals['total_open_size_short'], new_totals['total_close_size_short'], new_totals['remaining_open_size_short'],
                     new_totals['accumulated_fees_long'], new_totals['accumulated_fees_short'], new_totals['realized_fees'], net_pnl,
                     fee, bot_fee))
                
                processed_count += 1
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
                send_trade_notifications(wallet, coin, direction, size, price, closed_pnl, net_pnl, timestamp, oid)
                
            except Exception as e:
                debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–¥–µ–ª–∫–∏ {fill.get('oid', 'unknown')}: {e}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        debug_logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
        return processed_count
        
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")
        return 0

def collect_pnl_data_by_wallets():
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ PnL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    wallets_data = {}
    
    for wallet in WALLETS:
        try:
            cursor.execute(f"""
                SELECT timestamp, closedPnl, net_pnl, coin, oid
                FROM trades_{wallet}
                ORDER BY timestamp ASC
            """)
            
            wallet_trades = cursor.fetchall()
            wallet_trades_list = []
            
            for trade in wallet_trades:
                wallet_trades_list.append({
                    'timestamp': trade[0],
                    'closedPnl': safe_float(trade[1]),
                    'net_pnl': safe_float(trade[2]),
                    'coin': trade[3],
                    'oid': trade[4]
                })
            
            wallets_data[wallet] = wallet_trades_list
            
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")
            debug_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}")
            wallets_data[wallet] = []
    
    return wallets_data

def create_per_wallet_pnl_charts():
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—à–µ–ª—å–∫—É –Ω–∞ –æ–¥–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ"""
    try:
        print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—à–µ–ª—å–∫—É
        wallets_data = collect_pnl_data_by_wallets()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è Closed PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        fig_closed_wallets = go.Figure()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è Net PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º  
        fig_net_wallets = go.Figure()
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
        colors = ['blue', 'red', 'green', 'orange', 'purple', 'brown', 'pink', 'gray', 'olive', 'cyan']
        
        for i, (wallet, trades) in enumerate(wallets_data.items()):
            if not trades:
                continue
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
            cumulative_closed_pnl = 0
            cumulative_net_pnl = 0
            timestamps = []
            closed_pnl_values = []
            net_pnl_values = []
            
            for trade in trades:
                cumulative_closed_pnl += safe_float(trade['closedPnl']) or 0.0
                cumulative_net_pnl += safe_float(trade['net_pnl']) or 0.0
                
                timestamps.append(datetime.fromtimestamp(trade['timestamp'] / 1000))
                closed_pnl_values.append(cumulative_closed_pnl)
                net_pnl_values.append(cumulative_net_pnl)
            
            # –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ª–µ–≥–µ–Ω–¥—ã
            wallet_short = f"{wallet[:6]}...{wallet[-4:]}"
            color = colors[i % len(colors)]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –¥–ª—è Closed PnL
            fig_closed_wallets.add_trace(go.Scatter(
                x=timestamps,
                y=closed_pnl_values,
                mode='lines',
                name=f'{wallet_short}',
                line=dict(color=color, width=2),
                hovertemplate=f'<b>–ö–æ—à–µ–ª–µ–∫:</b> {wallet_short}<br>' +
                             '<b>–í—Ä–µ–º—è:</b> %{x}<br>' +
                             '<b>–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL:</b> %{y:.4f}<br>' +
                             '<extra></extra>'
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –¥–ª—è Net PnL
            fig_net_wallets.add_trace(go.Scatter(
                x=timestamps,
                y=net_pnl_values,
                mode='lines',
                name=f'{wallet_short}',
                line=dict(color=color, width=2),
                hovertemplate=f'<b>–ö–æ—à–µ–ª–µ–∫:</b> {wallet_short}<br>' +
                             '<b>–í—Ä–µ–º—è:</b> %{x}<br>' +
                             '<b>–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL:</b> %{y:.4f}<br>' +
                             '<extra></extra>'
            ))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ Closed PnL
        fig_closed_wallets.update_layout(
            title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)',
            xaxis_title='–í—Ä–µ–º—è',
            yaxis_title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Closed PnL',
            template='plotly_white',
            hovermode='x unified',
            legend=dict(
                orientation="v",
                yanchor="top",
                y=1,
                xanchor="left",
                x=1.02
            )
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ Net PnL
        fig_net_wallets.add_hline(y=0, line_dash="dash", line_color="gray", 
                                 annotation_text="–ù—É–ª–µ–≤–∞—è –ª–∏–Ω–∏—è")
        
        fig_net_wallets.update_layout(
            title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è)',
            xaxis_title='–í—Ä–µ–º—è',
            yaxis_title='–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π Net PnL',
            template='plotly_white',
            hovermode='x unified',
            legend=dict(
                orientation="v",
                yanchor="top",
                y=1,
                xanchor="left",
                x=1.02
            )
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        fig_closed_wallets.write_html("closed_pnl_by_wallets.html")
        fig_net_wallets.write_html("net_pnl_by_wallets.html")
        
        print(f"üìà –ì—Ä–∞—Ñ–∏–∫ Closed PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: closed_pnl_by_wallets.html")
        print(f"üí∞ –ì—Ä–∞—Ñ–∏–∫ Net PnL –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: net_pnl_by_wallets.html")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º: {e}"
        print(error_msg)
        debug_logger.error(error_msg)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def format_timestamp(ms):
    try:
        return datetime.fromtimestamp(ms / 1000).strftime('%Y-%m-%d %H:%M:%S.%f')
    except Exception as e:
        debug_logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
def get_direction(fill, wallet_address):
    dir_field = fill.get('dir') or fill.get('direction') or ''
    side = fill.get('side', '').lower()
    start_position = safe_float(fill.get('startPosition', 0.0))
    sz = safe_float(fill.get('sz', 0.0))
    liquidation = fill.get('liquidation', None)
    address = wallet_address.lower()
    debug_logger.debug(f"get_direction: oid={fill.get('oid', 'N/A')}, dir={dir_field}, side={side}, startPosition={start_position}, sz={sz}, liquidation={liquidation}, address={address}")
    
    if sz <= 0:
        debug_logger.warning(f"Invalid sz {sz} for oid {fill.get('oid', 'N/A')}")
        return f"Invalid (sz: {sz})"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
    if liquidation and liquidation.get('method') == 'market':
        debug_logger.info(f"Liquidation detected for oid {fill.get('oid', 'N/A')}")
        liquidated_user = liquidation.get('liquidatedUser', 'N/A').lower()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ dir –∏–∑ API –≤–º–µ—Å—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ start_position
        # API —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
        if 'Long' in dir_field:
            base_direction = 'Long'
        elif 'Short' in dir_field:
            base_direction = 'Short'
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ dir_field –Ω–µ—è—Å–µ–Ω
            base_direction = 'Long' if start_position >= 0 else 'Short'
        
        debug_logger.info(f"Liquidation direction determined: dir_field='{dir_field}' -> base_direction='{base_direction}'")
        
        if liquidated_user == address:
            # –î–ª—è short –ø–æ–∑–∏—Ü–∏–∏: –µ—Å–ª–∏ sz —Ä–∞–≤–µ–Ω abs(start_position), —Ç–æ –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            # –î–ª—è long –ø–æ–∑–∏—Ü–∏–∏: –µ—Å–ª–∏ sz —Ä–∞–≤–µ–Ω start_position, —Ç–æ –ø–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            if start_position < 0:  # Short –ø–æ–∑–∏—Ü–∏—è
                if abs(sz - abs(start_position)) < 1e-8:
                    return f'Close {base_direction} (Liquidation)'
                else:
                    return f'Decrease {base_direction} (Partial Liquidation)'
            else:  # Long –ø–æ–∑–∏—Ü–∏—è
                if abs(sz - start_position) < 1e-8:
                    return f'Close {base_direction} (Liquidation)'
                else:
                    return f'Decrease {base_direction} (Partial Liquidation)'
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å—Ç–æ—Ä–æ–Ω—ã
    # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç side –∫–∞–∫ 'a' (ask/sell) –∏–ª–∏ 'b' (bid/buy)
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ startPosition –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    # –î–ª—è buy —Å–¥–µ–ª–æ–∫ (side 'b'): –ø–æ–∑–∏—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π)
    if side == 'b' or side == 'buy':
        if start_position <= 0:  # –ë—ã–ª–æ short –∏–ª–∏ –Ω–æ–ª—å
            if abs(start_position + sz) < 1e-10:  # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
                return 'Close Short'
            elif start_position + sz > 0:  # –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ long
                if abs(start_position) < 1e-10:
                    return 'Open Long'
                else:
                    return 'Close Short + Open Long'  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ short + –æ—Ç–∫—Ä—ã—Ç–∏–µ long
            else:  # –û—Å—Ç–∞–µ—Ç—Å—è short, –Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
                return 'Decrease Short'
        else:  # –ë—ã–ª–æ long
            return 'Increase Long'
    
    # –î–ª—è sell —Å–¥–µ–ª–æ–∫ (side 'a'): –ø–æ–∑–∏—Ü–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è (—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª–µ–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)
    elif side == 'a' or side == 'sell':
        if start_position >= 0:  # –ë—ã–ª–æ long –∏–ª–∏ –Ω–æ–ª—å
            if abs(start_position - sz) < 1e-10:  # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
                return 'Close Long'
            elif start_position - sz < 0:  # –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ short
                if abs(start_position) < 1e-10:
                    return 'Open Short'
                else:
                    return 'Close Long + Open Short'  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ long + –æ—Ç–∫—Ä—ã—Ç–∏–µ short
            else:  # –û—Å—Ç–∞–µ—Ç—Å—è long, –Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
                return 'Decrease Long'
        else:  # –ë—ã–ª–æ short
            return 'Increase Short'
    
    # Fallback –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    debug_logger.warning(f"Unknown direction for oid {fill.get('oid', 'N/A')}: dir={dir_field}, side={side}, startPosition={start_position}, sz={sz}")
    return f"Unknown (dir: {dir_field}, side: {side}, startPosition: {start_position}, sz: {sz})"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –±–æ—Ç–∞
def calculate_bot_fee(size, price, bot_fee_bps=5):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –±–æ—Ç–∞ –æ—Ç –æ–±—ä–µ–º–∞ —Å–¥–µ–ª–∫–∏"""
    volume = safe_float(size, 0.0) * safe_float(price, 0.0)
    bot_fee = volume * (bot_fee_bps / 10000.0)  # bps –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
    return bot_fee

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–µ—Ç—ã
def get_current_totals(wallet, coin, cursor):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏"""
    cursor.execute(f'''
        SELECT total_open_size_long, total_close_size_long, 
               total_open_size_short, total_close_size_short,
               accumulated_fees_long, accumulated_fees_short
        FROM trades_{wallet} 
        WHERE coin = ? 
        ORDER BY id DESC 
        LIMIT 1
    ''', (coin,))
    
    result = cursor.fetchone()
    if result:
        return {
            'total_open_size_long': safe_float(result[0], 0.0),
            'total_close_size_long': safe_float(result[1], 0.0),
            'total_open_size_short': safe_float(result[2], 0.0),
            'total_close_size_short': safe_float(result[3], 0.0),
            'accumulated_fees_long': safe_float(result[4], 0.0),
            'accumulated_fees_short': safe_float(result[5], 0.0)
        }
    else:
        return {
            'total_open_size_long': 0.0,
            'total_close_size_long': 0.0,
            'total_open_size_short': 0.0,
            'total_close_size_short': 0.0,
            'accumulated_fees_long': 0.0,
            'accumulated_fees_short': 0.0
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏
def calculate_new_totals(current_totals, direction, size, exchange_fee, bot_fee):
    open_directions = ['Open Long', 'Increase Long', 'Open Long (Liquidation Taker)', 'Increase Long (Liquidation Taker)']
    close_directions = ['Close Long', 'Decrease Long', 'Close Long (Liquidation)', 'Decrease Long (Partial Liquidation)']
    short_open_directions = ['Open Short', 'Increase Short', 'Open Short (Liquidation Taker)', 'Increase Short (Liquidation Taker)']
    short_close_directions = ['Close Short', 'Decrease Short', 'Close Short (Liquidation)', 'Decrease Short (Partial Liquidation)']
    combined_directions = ['Close Short + Open Long', 'Close Long + Open Short']
    
    new_totals = current_totals.copy()
    size = safe_float(size, 0.0)
    total_trade_fee = safe_float(exchange_fee, 0.0) + safe_float(bot_fee, 0.0)
    realized_fees = 0.0
    
    if size > 0:
        if direction in open_directions:
            new_totals['total_open_size_long'] += size
            # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Long –ø–æ–∑–∏—Ü–∏–π
            new_totals['accumulated_fees_long'] += total_trade_fee
            
        elif direction in close_directions:
            new_totals['total_close_size_long'] += size
            # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Long –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
            current_remaining = new_totals['total_open_size_long'] - current_totals['total_close_size_long']
            if current_remaining > 0 and new_totals['accumulated_fees_long'] > 0:
                proportion = size / current_remaining
                proportion = min(proportion, 1.0)
                realized_fees = new_totals['accumulated_fees_long'] * proportion
                new_totals['accumulated_fees_long'] -= realized_fees
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, accumulated_fees_long –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é
                remaining_after_close = new_totals['total_open_size_long'] - new_totals['total_close_size_long']
                if abs(remaining_after_close) < 1e-10 and abs(new_totals['accumulated_fees_long']) > 1e-6:
                    debug_logger.warning(f"!!! FEES WARNING: Long position fully closed but accumulated_fees_long is not zero: {new_totals['accumulated_fees_long']:.6f}")
                    new_totals['fees_warning_long'] = True
                    realized_fees += new_totals['accumulated_fees_long']
                    new_totals['accumulated_fees_long'] = 0.0
            
        elif direction in short_open_directions:
            new_totals['total_open_size_short'] += size
            # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Short –ø–æ–∑–∏—Ü–∏–π
            new_totals['accumulated_fees_short'] += total_trade_fee
            
        elif direction in short_close_directions:
            new_totals['total_close_size_short'] += size
            # –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Short –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
            current_remaining = new_totals['total_open_size_short'] - current_totals['total_close_size_short']
            if current_remaining > 0 and new_totals['accumulated_fees_short'] > 0:
                proportion = size / current_remaining
                proportion = min(proportion, 1.0)
                realized_fees = new_totals['accumulated_fees_short'] * proportion
                new_totals['accumulated_fees_short'] -= realized_fees
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é, accumulated_fees_short –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω—É–ª—é
                remaining_after_close = new_totals['total_open_size_short'] - new_totals['total_close_size_short']
                if abs(remaining_after_close) < 1e-10 and abs(new_totals['accumulated_fees_short']) > 1e-6:
                    debug_logger.warning(f"!!! FEES WARNING: Short position fully closed but accumulated_fees_short is not zero: {new_totals['accumulated_fees_short']:.6f}")
                    new_totals['fees_warning_short'] = True
                    realized_fees += new_totals['accumulated_fees_short']
                    new_totals['accumulated_fees_short'] = 0.0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–Ω–æ–≤–æ–µ) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –¥–≤–æ–π–Ω–æ–≥–æ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        elif direction in combined_directions:
            if direction == 'Close Short + Open Long':
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
                close_size = abs(current_totals['total_open_size_short'] - current_totals['total_close_size_short'])
                open_size = size - close_size
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                close_ratio = close_size / size if size > 0 else 0
                close_fee = total_trade_fee * close_ratio
                open_fee = total_trade_fee - close_fee
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º short –ø–æ–∑–∏—Ü–∏—é
                new_totals['total_close_size_short'] += close_size
                if new_totals['accumulated_fees_short'] > 0:
                    realized_fees = new_totals['accumulated_fees_short']
                    new_totals['accumulated_fees_short'] = 0.0
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º long –ø–æ–∑–∏—Ü–∏—é
                if open_size > 0:
                    new_totals['total_open_size_long'] += open_size
                    new_totals['accumulated_fees_long'] += open_fee
                
                # –î–ª—è Net PnL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—é –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
                new_totals['close_fee_only'] = close_fee
                
            elif direction == 'Close Long + Open Short':
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è
                close_size = abs(current_totals['total_open_size_long'] - current_totals['total_close_size_long'])
                open_size = size - close_size
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                close_ratio = close_size / size if size > 0 else 0
                close_fee = total_trade_fee * close_ratio
                open_fee = total_trade_fee - close_fee
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º long –ø–æ–∑–∏—Ü–∏—é
                new_totals['total_close_size_long'] += close_size
                if new_totals['accumulated_fees_long'] > 0:
                    realized_fees = new_totals['accumulated_fees_long']
                    new_totals['accumulated_fees_long'] = 0.0
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º short –ø–æ–∑–∏—Ü–∏—é
                if open_size > 0:
                    new_totals['total_open_size_short'] += open_size
                    new_totals['accumulated_fees_short'] += open_fee
                
                # –î–ª—è Net PnL –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—é –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
                new_totals['close_fee_only'] = close_fee
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º remaining
    new_totals['remaining_open_size_long'] = new_totals['total_open_size_long'] - new_totals['total_close_size_long']
    new_totals['remaining_open_size_short'] = new_totals['total_open_size_short'] - new_totals['total_close_size_short']
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –Ω—É–ª—è (-0.0000)
    tolerance = 1e-10
    if abs(new_totals['remaining_open_size_long']) < tolerance:
        new_totals['remaining_open_size_long'] = 0.0
    if abs(new_totals['remaining_open_size_short']) < tolerance:
        new_totals['remaining_open_size_short'] = 0.0
    if abs(new_totals['accumulated_fees_long']) < tolerance:
        new_totals['accumulated_fees_long'] = 0.0
    if abs(new_totals['accumulated_fees_short']) < tolerance:
        new_totals['accumulated_fees_short'] = 0.0
    
    new_totals['realized_fees'] = realized_fees
    
    return new_totals

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–∞—Å—á–µ—Ç Net PnL —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π
def calculate_net_pnl(closed_pnl, exchange_fee, bot_fee, realized_fees, direction, close_fee_only=None):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å—Ç—ã–π PnL —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π
    
    –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π (Open/Increase) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0,
    –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–º–∏—Å—Å–∏–π, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏.
    """
    # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π Net PnL = 0.0
    if direction and ('Open' in direction or 'Increase' in direction):
        return 0.0
    
    # –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    if close_fee_only is not None:
        # –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—é –æ—Ç –∑–∞–∫—Ä—ã—Ç–∏—è
        total_fees = safe_float(close_fee_only, 0.0) + safe_float(realized_fees, 0.0)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏
        total_fees = safe_float(exchange_fee, 0.0) + safe_float(bot_fee, 0.0) + safe_float(realized_fees, 0.0)
    net_pnl = safe_float(closed_pnl, 0.0) - total_fees
    return net_pnl

# –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º Net PnL
def check_negative_pnl(net_pnl, coin, oid, timestamp, wallet):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Net PnL –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –º–∏–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–∏—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
    if net_pnl < -1e-8:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏
        cursor.execute(f'''
            SELECT COUNT(*) FROM sent_trades_{wallet} WHERE oid = ?
        ''', (oid,))
        
        if cursor.fetchone()[0] > 0:
            return False  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        
        negative_pnl_msg = (f"‚ö†Ô∏è NEGATIVE NET PnL WARNING ‚ö†Ô∏è\n"
                          f"Wallet: {wallet}\n"
                          f"Coin: {coin}\n"
                          f"OID: {oid}\n"
                          f"Net PnL: {net_pnl:.4f}\n"
                          f"Time: {format_timestamp(timestamp)}\n"
                          f"{'='*50}")
        
        print(negative_pnl_msg)
        debug_logger.warning(negative_pnl_msg.replace('\n', ' | '))
        
        # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try:
            # send_tg_message(negative_pnl_msg)  # –û–¢–ö–õ–Æ–ß–ï–ù–û –ù–ê –í–†–ï–ú–Ø –û–¢–õ–ê–î–ö–ò
            print("üìµ Telegram notification disabled for debugging")
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            cursor.execute(f'''
                INSERT OR IGNORE INTO sent_trades_{wallet} (oid) VALUES (?)
            ''', (oid,))
            conn.commit()  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        except Exception as e:
            debug_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sent_trades –≤ –ë–î: {e}")
        
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–¥–µ–ª–∫–µ
def format_trade_info(wallet, trade_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    bot_fee = safe_float(trade_data.get('bot_fee', 0.0)) or 0.0
    exchange_fee = safe_float(trade_data.get('fee', 0.0)) or 0.0
    realized_fees = safe_float(trade_data.get('realized_fees', 0.0)) or 0.0
    current_fees = exchange_fee + bot_fee
    total_fees = current_fees + realized_fees
    closed_pnl = safe_float(trade_data.get('closedPnl', 0.0)) or 0.0
    net_pnl = safe_float(trade_data.get('net_pnl', 0.0)) or 0.0
    size = safe_float(trade_data.get('size', 0.0)) or 0.0
    price = safe_float(trade_data.get('price', 0.0)) or 0.0
    
    return (f"Wallet: {wallet} | "
            f"OID: {trade_data.get('oid', 'N/A')} | "
            f"Coin: {trade_data.get('coin', 'N/A')} | "
            f"Direction: {trade_data.get('direction', 'N/A')} | "
            f"Size: {size:.6f} | "
            f"Price: {price:.4f} | "
            f"Exchange Fee: {exchange_fee:.6f} | "
            f"Bot Fee: {bot_fee:.6f} | "
            f"Realized Fees: {realized_fees:.6f} | "
            f"Total Fees: {total_fees:.6f} | "
            f"Closed PnL: {closed_pnl:.4f} | "
            f"Net PnL: {net_pnl:.4f} | "
            f"Time: {format_timestamp(trade_data.get('timestamp', 0))}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ –º–æ–Ω–µ—Ç–∞–º
def save_trades_to_files():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–¥–µ–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–∞–º, –≤ –ø–æ—Ä—è–¥–∫–µ ID"""
    for wallet in WALLETS:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ ID
        cursor.execute(f'''
            SELECT * FROM trades_{wallet} ORDER BY id ASC
        ''')
        
        trades = cursor.fetchall()
        if not trades:
            continue
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        cursor.execute(f"PRAGMA table_info(trades_{wallet})")
        columns = [column[1] for column in cursor.fetchall()]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–æ–Ω–µ—Ç–∞–º
        coins_data = {}
        for trade in trades:
            trade_dict = dict(zip(columns, trade))
            coin = trade_dict['coin']
            if coin not in coins_data:
                coins_data[coin] = []
            coins_data[coin].append(trade_dict)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        for coin, coin_trades in coins_data.items():
            filename = f"trade_sequence_{coin}_{wallet}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"Trade sequence for {coin} - Wallet: {wallet}\n")
                f.write("=" * 200 + "\n")
                
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                header = (f"{'ID':<3} | {'OID':<12} | {'Direction':<18} | {'Size':<8} | {'Price':<8} | "
                         f"{'Exchange Fee':<11} | {'Bot Fee':<8} | {'Realized Fee':<12} | {'Total Fee':<9} | "
                         f"{'Closed PnL':<10} | {'Net PnL':<8} | {'Open Long':<9} | {'Close Long':<10} | {'Remain Long':<11} | "
                         f"{'Accum Fee Long':<13} | {'Open Short':<10} | {'Close Short':<11} | {'Remain Short':<12} | {'Accum Fee Short':<14} | "
                         f"{'Time':<19} | {'Warnings'}")
                f.write(header + "\n")
                f.write("-" * 200 + "\n")
                
                for trade in coin_trades:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏ –≤ —Ñ–∞–π–ª–µ
                    size = safe_float(trade.get('size', 0.0)) or 0.0
                    price = safe_float(trade.get('price', 0.0)) or 0.0
                    bot_fee_bps = config.get('bot_fee_bps', 5)
                    bot_fee = calculate_bot_fee(size, price, bot_fee_bps)
                    exchange_fee = safe_float(trade.get('fee', 0.0)) or 0.0
                    realized_fees = safe_float(trade.get('realized_fees', 0.0)) or 0.0
                    current_fees = exchange_fee + bot_fee
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    open_long = safe_float(trade.get('total_open_size_long', 0.0)) or 0.0
                    close_long = safe_float(trade.get('total_close_size_long', 0.0)) or 0.0
                    remain_long = safe_float(trade.get('remaining_open_size_long', 0.0)) or 0.0
                    accum_fee_long = safe_float(trade.get('accumulated_fees_long', 0.0)) or 0.0
                    open_short = safe_float(trade.get('total_open_size_short', 0.0)) or 0.0
                    close_short = safe_float(trade.get('total_close_size_short', 0.0)) or 0.0
                    remain_short = safe_float(trade.get('remaining_open_size_short', 0.0)) or 0.0
                    accum_fee_short = safe_float(trade.get('accumulated_fees_short', 0.0)) or 0.0
                    closed_pnl = safe_float(trade.get('closedPnl', 0.0)) or 0.0
                    net_pnl = safe_float(trade.get('net_pnl', 0.0)) or 0.0
                    total_fees = current_fees + realized_fees
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π  
                    closing_directions = [
                        'Close Long', 'Close Short', 'Decrease Long', 'Decrease Short',
                        'Close Long + Open Short', 'Close Short + Open Long'
                    ]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    warning_text = ""
                    if net_pnl is not None and net_pnl < 0 and trade.get('direction') in closing_directions:
                        warning_text = f"‚ö†Ô∏è Negative Net PnL ({net_pnl:.4f})"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ–¥ –ø–æ–ª–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    line = (f"{trade.get('id', 0):<3} | {trade.get('oid', 'N/A'):<12} | {trade.get('direction', 'N/A'):<18} | "
                           f"{size:<8.4f} | {price:<8.4f} | "
                           f"{exchange_fee:<11.6f} | {bot_fee:<8.6f} | {realized_fees:<12.6f} | {total_fees:<9.6f} | "
                           f"{closed_pnl:<10.4f} | {net_pnl:<8.4f} | "
                           f"{open_long:<9.4f} | {close_long:<10.4f} | {remain_long:<11.4f} | {accum_fee_long:<13.6f} | "
                           f"{open_short:<10.4f} | {close_short:<11.4f} | {remain_short:<12.4f} | {accum_fee_short:<14.6f} | "
                           f"{format_timestamp(trade.get('timestamp', 0))} | {warning_text}")
                    
                    f.write(line.rstrip() + "\n")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                    tolerance = 1e-6
                    remaining_long = safe_float(trade.get('remaining_open_size_long', 0.0)) or 0.0
                    remaining_short = safe_float(trade.get('remaining_open_size_short', 0.0)) or 0.0
                    
                    if remaining_long < -tolerance:
                        f.write(f"!!! WARNING: Remaining Open Size became negative ({remaining_long:.4f}) "
                               f"at ID {trade.get('id', 0)}, OID {trade.get('oid', 'N/A')}, "
                               f"Timestamp {format_timestamp(trade.get('timestamp', 0))}\n")
                    if remaining_short < -tolerance:
                        f.write(f"!!! WARNING: Remaining Short Size became negative ({remaining_short:.4f}) "
                               f"at ID {trade.get('id', 0)}, OID {trade.get('oid', 'N/A')}, "
                               f"Timestamp {format_timestamp(trade.get('timestamp', 0))}\n")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π
                    if abs(remaining_long) < 1e-10 and abs(safe_float(trade.get('accumulated_fees_long', 0.0))) > 1e-6:
                        f.write(f"!!! FEES WARNING: Long position fully closed but accumulated_fees_long is not zero: "
                               f"{safe_float(trade.get('accumulated_fees_long', 0.0)):.6f} "
                               f"at ID {trade['id']}, OID {trade['oid']}, "
                               f"Timestamp {format_timestamp(trade['timestamp'])}\n")
                    
                    if abs(remaining_short) < 1e-10 and abs(safe_float(trade.get('accumulated_fees_short', 0.0))) > 1e-6:
                        f.write(f"!!! FEES WARNING: Short position fully closed but accumulated_fees_short is not zero: "
                               f"{safe_float(trade.get('accumulated_fees_short', 0.0)):.6f} "
                               f"at ID {trade['id']}, OID {trade['oid']}, "
                               f"Timestamp {format_timestamp(trade['timestamp'])}\n")
                    
                    f.write("\n")
            
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename} ({len(coin_trades)} —Å–¥–µ–ª–æ–∫)")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
def process_new_trades():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
    
    for wallet in WALLETS:
        try:
            print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ {wallet} ===")
            debug_logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∏–∑ API
            user_fills = info.user_fills(wallet)
            
            if not user_fills:
                print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
                continue
            
            # –í–ê–ñ–ù–û: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ timestamp, –ø–æ—Ç–æ–º –ø–æ OID –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö timestamp
            user_fills_sorted = sorted(user_fills, key=lambda x: (x.get('time', 0), int(x.get('oid', 0))))
            
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(user_fills)} —Å–¥–µ–ª–æ–∫ –∏–∑ API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ timestamp+OID)")
            debug_logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(user_fills)} —Å–¥–µ–ª–æ–∫ –∏–∑ API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ timestamp+OID)")
                
            new_trades_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            for fill in user_fills_sorted:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                    oid = str(fill.get('oid', ''))
                    coin = fill.get('coin', '')
                    timestamp = int(fill.get('time', 0))
                    price = safe_float(fill.get('px', 0.0))
                    size = safe_float(fill.get('sz', 0.0))
                    side = fill.get('side', '')
                    closed_pnl = safe_float(fill.get('closedPnl', 0.0))
                    fee = safe_float(fill.get('fee', 0.0))
                    start_position = safe_float(fill.get('startPosition', 0.0))
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º–æ–π —Å—Ç–∞–≤–∫–æ–π
                    bot_fee_bps = config.get('bot_fee_bps', 5)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 bps
                    bot_fee = calculate_bot_fee(size, price, bot_fee_bps)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                    direction = get_direction(fill, wallet)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Å–¥–µ–ª–∫–∞ –≤ –±–∞–∑–µ
                    cursor.execute(f'''
                        SELECT COUNT(*) FROM trades_{wallet} 
                        WHERE oid = ? AND coin = ? AND timestamp = ? AND size = ? AND startPosition = ?
                    ''', (oid, coin, timestamp, size, start_position))
                    
                    if cursor.fetchone()[0] > 0:
                        continue  # –°–¥–µ–ª–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
                    current_totals = get_current_totals(wallet, coin, cursor)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏)
                    new_totals = calculate_new_totals(current_totals, direction, size, fee, bot_fee)
                    
                    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å—Ç—ã–π PnL —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π
                    close_fee_only = new_totals.get('close_fee_only', None)
                    net_pnl = calculate_net_pnl(closed_pnl, fee, bot_fee, new_totals['realized_fees'], direction, close_fee_only)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ totals –∏ Net PnL
                    cursor.execute(f'''
                        INSERT INTO trades_{wallet} (
                            timestamp, oid, coin, price, size, side, direction, 
                            closedPnl, fee, startPosition,
                            total_open_size_long, total_close_size_long, remaining_open_size_long,
                            total_open_size_short, total_close_size_short, remaining_open_size_short,
                            accumulated_fees_long, accumulated_fees_short, realized_fees, net_pnl
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        timestamp, oid, coin, price, size, side, direction,
                        closed_pnl, fee, start_position,
                        new_totals['total_open_size_long'], new_totals['total_close_size_long'], new_totals['remaining_open_size_long'],
                        new_totals['total_open_size_short'], new_totals['total_close_size_short'], new_totals['remaining_open_size_short'],
                        new_totals['accumulated_fees_long'], new_totals['accumulated_fees_short'], new_totals['realized_fees'], net_pnl
                    ))
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∫–æ–º–∏—Å—Å–∏—è–º–∏ –∏ Net PnL
                    trade_data = {
                        'oid': oid,
                        'coin': coin,
                        'timestamp': timestamp,
                        'price': price,
                        'size': size,
                        'side': side,
                        'direction': direction,
                        'closedPnl': closed_pnl,
                        'fee': fee,
                        'bot_fee': bot_fee,
                        'realized_fees': new_totals['realized_fees'],
                        'net_pnl': net_pnl,
                        'startPosition': start_position,
                        **new_totals
                    }
                    
                    trade_info = format_trade_info(wallet, trade_data)
                    print(trade_info)
                    debug_logger.info(trade_info)
                    
                    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Net PnL
                    # –¢–û–õ–¨–ö–û –¥–ª—è —Å–¥–µ–ª–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π (–≥–¥–µ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π PnL)
                    closing_directions = [
                        'Close Long', 'Close Short', 'Decrease Long', 'Decrease Short',
                        'Close Long + Open Short', 'Close Short + Open Long'
                    ]
                    
                    if direction in closing_directions:
                        check_negative_pnl(net_pnl, coin, oid, timestamp, wallet)
                    else:
                        debug_logger.debug(f"Skipping Net PnL check for opening/increasing direction: {direction} (Net PnL: {net_pnl:.4f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
                    if new_totals.get('fees_warning_long', False):
                        fees_warning_msg = (f"!!! FEES WARNING: Long position fully closed but accumulated fees were not zero "
                                          f"for {coin} at OID {oid}, Timestamp {format_timestamp(timestamp)}")
                        print(fees_warning_msg)
                        debug_logger.warning(fees_warning_msg)
                    
                    if new_totals.get('fees_warning_short', False):
                        fees_warning_msg = (f"!!! FEES WARNING: Short position fully closed but accumulated fees were not zero "
                                          f"for {coin} at OID {oid}, Timestamp {format_timestamp(timestamp)}")
                        print(fees_warning_msg)
                        debug_logger.warning(fees_warning_msg)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                    tolerance = 1e-6
                    remaining_long = safe_float(new_totals.get('remaining_open_size_long', 0.0)) or 0.0
                    remaining_short = safe_float(new_totals.get('remaining_open_size_short', 0.0)) or 0.0
                    
                    if remaining_long < -tolerance:
                        warning_msg = (f"!!! WARNING: Remaining Open Long Size became negative "
                                     f"({remaining_long:.4f}) for {coin} "
                                     f"at OID {oid}, Timestamp {format_timestamp(timestamp)}")
                        print(warning_msg)
                        debug_logger.warning(warning_msg)
                    
                    if remaining_short < -tolerance:
                        warning_msg = (f"!!! WARNING: Remaining Open Short Size became negative "
                                     f"({remaining_short:.4f}) for {coin} "
                                     f"at OID {oid}, Timestamp {format_timestamp(timestamp)}")
                        print(warning_msg)
                        debug_logger.warning(warning_msg)
                    
                    new_trades_count += 1
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ {fill}: {e}"
                    print(error_msg)
                    debug_logger.error(error_msg)
                    continue
            
            if new_trades_count > 0:
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {new_trades_count} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet}")
            else:
                print(f"–ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {wallet}: {e}"
            print(error_msg)
            debug_logger.error(error_msg)
            with open("app_errors.log", "a") as f:
                f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {error_msg}\n")

def display_wallet_summary():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∫–æ—à–µ–ª—å–∫–∞–º"""
    try:
        print("\nüìä –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º:")
        print("=" * 60)
        
        for wallet in WALLETS:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cursor.execute(f"""
                    SELECT SUM(closedPnl) as total_closed_pnl, SUM(net_pnl) as total_net_pnl 
                    FROM trades_{wallet}
                """)
                
                result = cursor.fetchone()
                if result and result[0] is not None:
                    total_closed_pnl = safe_float(result[0]) or 0.0
                    total_net_pnl = safe_float(result[1]) or 0.0
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if total_net_pnl is not None and total_net_pnl > 0:
                        symbol = "üü¢"
                        status = f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: +{total_net_pnl:.4f}"
                    else:
                        symbol = "üî¥"
                        status = f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_net_pnl:.4f}"
                    
                    print(f"üíº –ö–æ—à–µ–ª–µ–∫: {wallet}")
                    print(f"   üìà –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π Closed PnL:   {total_closed_pnl:10.4f}")
                    print(f"   üí∞ –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π Net PnL:     {total_net_pnl:10.4f}")
                    print(f"   {symbol} {status}")
                else:
                    print(f"üíº –ö–æ—à–µ–ª–µ–∫: {wallet}")
                    print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")
            except Exception as e:
                print(f"üíº –ö–æ—à–µ–ª–µ–∫: {wallet}")
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                debug_logger.error(f"–û—à–∏–±–∫–∞ display_wallet_summary –¥–ª—è {wallet}: {e}")
    except Exception as e:
        debug_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ display_wallet_summary: {e}")
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º")

def run_incremental_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        debug_logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        total_new_trades = 0
        wallets_with_new_trades = []
        
        for wallet in WALLETS:
            new_trades_count = process_incremental_trades_for_wallet(wallet)
            debug_logger.info(f"üîç –ö–æ—à–µ–ª–µ–∫ {wallet}: process_incremental_trades_for_wallet –≤–µ—Ä–Ω—É–ª {new_trades_count}")
            total_new_trades += new_trades_count
            debug_logger.info(f"üî¢ total_new_trades —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω {total_new_trades}")
            
            if new_trades_count > 0:
                wallets_with_new_trades.append(wallet)
                print(f"üÜï –ö–æ—à–µ–ª–µ–∫ {wallet[:8]}...{wallet[-6:]}: {new_trades_count} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
        
        debug_logger.info(f"üéØ –ò—Ç–æ–≥–æ–≤—ã–π total_new_trades: {total_new_trades}")
        debug_logger.info(f"üéØ –£—Å–ª–æ–≤–∏–µ total_new_trades > 0: {total_new_trades > 0}")
        
        if total_new_trades > 0:
            print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {total_new_trades} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
            debug_logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {total_new_trades} –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
            
            # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
            debug_logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
            save_trades_to_files()
            create_cumulative_pnl_charts()
            create_per_wallet_pnl_charts()
            print("‚úÖ –û—Ç—á–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            debug_logger.info("‚úÖ –û—Ç—á–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
            display_wallet_summary()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤ Telegram
            send_incremental_summary(total_new_trades, wallets_with_new_trades)
            
        else:
            print("‚úÖ –ù–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        debug_logger.info(f"‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–¥–µ–ª–æ–∫: {total_new_trades}")
        return total_new_trades
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}"
        print(error_msg)
        debug_logger.error(error_msg)
        return 0

def continuous_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(sig, frame):
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        debug_logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç...")
    print("üìä –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
    debug_logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ Hyperliquid —Å —Ä–∞—Å—á–µ—Ç–æ–º Net PnL")
        print("üìä –§–æ—Ä–º—É–ª–∞ Net PnL: Closed PnL - (Exchange Fee + Bot Fee + Realized Fees)")
        print("‚ö†Ô∏è  –ü—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º Net PnL –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram\n")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º totals –∏ Net PnL –Ω–∞ –ª–µ—Ç—É
        process_new_trades()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.commit()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ –º–æ–Ω–µ—Ç–∞–º —Å Net PnL –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        save_trades_to_files()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ PnL
        create_cumulative_pnl_charts()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        create_per_wallet_pnl_charts()
        
        print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã trade_sequence_[COIN]_[WALLET].txt –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ PnL –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—à–µ–ª—å–∫—É
        display_wallet_summary()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        debug_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    print("\n‚è∞ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç...")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    send_monitoring_start_notification()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    print("\nüìä –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º...")
    send_hourly_positions_report()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç NET PnL –∑–∞ 24 —á–∞—Å–∞
    print("\nüìÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—É—Ç–æ—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ NET PnL –∑–∞ 24 —á–∞—Å–∞...")
    send_startup_daily_summary()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    cycle_count = 0
    while True:
        try:
            cycle_count += 1
            next_check_time = datetime.now().strftime('%H:%M:%S')
            
            # –°–ø–∏–º 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
            time.sleep(300)
            
            print(f"\nüïê [{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ #{cycle_count}")
            
            # –û—Å–æ–±–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∫–∞–∂–¥—ã–µ 3 –ø—Ä–æ–≤–µ—Ä–∫–∏
            if cycle_count % 3 == 1:
                debug_wallet_data('0xe04e82b16a9a418d50d8f9c358987d2ee735bded')
            
            # –ß–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º (–∫–∞–∂–¥—ã–µ 12 —Ü–∏–∫–ª–æ–≤ = 60 –º–∏–Ω—É—Ç)
            if cycle_count % 12 == 0:
                print(f"\n‚è∞ –ß–∞—Å –ø—Ä–æ—à–µ–ª - –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º...")
                send_hourly_positions_report()
            
            run_incremental_monitoring()
            
        except KeyboardInterrupt:
            print(f"\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            debug_logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}"
            print(error_msg)
            debug_logger.error(error_msg)
            print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            time.sleep(300)
    
    print("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    debug_logger.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        continuous_monitoring()
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        debug_logger.error(error_msg)
        print(error_msg)
        with open("app_errors.log", "a") as f:
            f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {error_msg}\n")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()

def main_analysis():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ Hyperliquid —Å —Ä–∞—Å—á–µ—Ç–æ–º Net PnL")
    print("üìä –§–æ—Ä–º—É–ª–∞ Net PnL: Closed PnL - (Exchange Fee + Bot Fee + Realized Fees)")
    print("‚ö†Ô∏è  –ü—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º Net PnL –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram\n")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º totals –∏ Net PnL –Ω–∞ –ª–µ—Ç—É
    process_new_trades()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.commit()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ –º–æ–Ω–µ—Ç–∞–º —Å Net PnL –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    save_trades_to_files()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ PnL
    create_cumulative_pnl_charts()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    create_per_wallet_pnl_charts()
    
    print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã trade_sequence_[COIN]_[WALLET].txt –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ PnL –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ—à–µ–ª—å–∫—É
    display_wallet_summary()

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        continuous_monitoring()
        
    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
        debug_logger.error(error_msg)
        print(error_msg)
        with open("app_errors.log", "a") as f:
            f.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {error_msg}\n")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()